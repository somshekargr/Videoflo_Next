/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CompareFacesResult
 */
export interface CompareFacesResult {
    /**
     * 
     * @type {boolean}
     * @memberof CompareFacesResult
     */
    success: boolean;
    /**
     * 
     * @type {number}
     * @memberof CompareFacesResult
     */
    errorCode?: number;
    /**
     * 
     * @type {string}
     * @memberof CompareFacesResult
     */
    errorMessage?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CompareFacesResult
     */
    isMatching?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CompareFacesResult
     */
    distance?: number;
    /**
     * 
     * @type {number}
     * @memberof CompareFacesResult
     */
    matchingPercentage?: number;
}
/**
 * 
 * @export
 * @interface CompareFacesResultQR
 */
export interface CompareFacesResultQR {
    /**
     * 
     * @type {boolean}
     * @memberof CompareFacesResultQR
     */
    success: boolean;
    /**
     * 
     * @type {number}
     * @memberof CompareFacesResultQR
     */
    errorCode?: number;
    /**
     * 
     * @type {string}
     * @memberof CompareFacesResultQR
     */
    errorMessage?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CompareFacesResultQR
     */
    isMatching?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CompareFacesResultQR
     */
    distance?: number;
    /**
     * 
     * @type {number}
     * @memberof CompareFacesResultQR
     */
    matchingPercentage?: number;
}
/**
 * Reference Image, in JPG/PNG/BMP format, encoded in base64 format
 * @export
 * @interface CompareFacesViewModel
 */
export interface CompareFacesViewModel {
    /**
     * 
     * @type {string}
     * @memberof CompareFacesViewModel
     */
    image1: string;
    /**
     * 
     * @type {string}
     * @memberof CompareFacesViewModel
     */
    image2: string;
}
/**
 * Reference Image, in JPG/PNG/BMP format, encoded in base64 format
 * @export
 * @interface CompareFacesViewModelQR
 */
export interface CompareFacesViewModelQR {
    /**
     * 
     * @type {string}
     * @memberof CompareFacesViewModelQR
     */
    image1: string;
    /**
     * 
     * @type {string}
     * @memberof CompareFacesViewModelQR
     */
    image2: string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface MatchPoseRequest
 */
export interface MatchPoseRequest {
    /**
     * 
     * @type {PoseName}
     * @memberof MatchPoseRequest
     */
    poseName: PoseName;
    /**
     * 
     * @type {Array<PredictWithActionViewModel>}
     * @memberof MatchPoseRequest
     */
    images: Array<PredictWithActionViewModel>;
}
/**
 * 
 * @export
 * @interface MatchPoseResultItem
 */
export interface MatchPoseResultItem {
    /**
     * 
     * @type {number}
     * @memberof MatchPoseResultItem
     */
    image_id: number;
    /**
     * 
     * @type {number}
     * @memberof MatchPoseResultItem
     */
    errorCode?: number;
    /**
     * 
     * @type {string}
     * @memberof MatchPoseResultItem
     */
    errorMessage?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MatchPoseResultItem
     */
    result?: boolean;
}
/**
 * 
 * @export
 * @interface MatchPoseResults
 */
export interface MatchPoseResults {
    /**
     * 
     * @type {boolean}
     * @memberof MatchPoseResults
     */
    success: boolean;
    /**
     * 
     * @type {number}
     * @memberof MatchPoseResults
     */
    errorCode?: number;
    /**
     * 
     * @type {string}
     * @memberof MatchPoseResults
     */
    errorMessage?: string;
    /**
     * 
     * @type {Array<MatchPoseResultItem>}
     * @memberof MatchPoseResults
     */
    results: Array<MatchPoseResultItem>;
}
/**
 * 
 * @export
 * @interface OcrResultItem
 */
export interface OcrResultItem {
    /**
     * 
     * @type {string}
     * @memberof OcrResultItem
     */
    value: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof OcrResultItem
     */
    bbox?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof OcrResultItem
     */
    confidence?: number;
    /**
     * 
     * @type {boolean}
     * @memberof OcrResultItem
     */
    has_glare?: boolean;
}
/**
 * 
 * @export
 * @interface PanOcrRequest
 */
export interface PanOcrRequest {
    /**
     * 
     * @type {string}
     * @memberof PanOcrRequest
     */
    image: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PanOcrRequest
     */
    fields_to_retrieve?: Array<string>;
}
/**
 * 
 * @export
 * @interface PanOcrResult
 */
export interface PanOcrResult {
    /**
     * 
     * @type {boolean}
     * @memberof PanOcrResult
     */
    success: boolean;
    /**
     * 
     * @type {number}
     * @memberof PanOcrResult
     */
    errorCode?: number;
    /**
     * 
     * @type {string}
     * @memberof PanOcrResult
     */
    errorMessage?: string;
    /**
     * 
     * @type {OcrResultItem}
     * @memberof PanOcrResult
     */
    dob?: OcrResultItem;
    /**
     * 
     * @type {OcrResultItem}
     * @memberof PanOcrResult
     */
    face_image?: OcrResultItem;
    /**
     * 
     * @type {OcrResultItem}
     * @memberof PanOcrResult
     */
    father_name?: OcrResultItem;
    /**
     * 
     * @type {OcrResultItem}
     * @memberof PanOcrResult
     */
    name?: OcrResultItem;
    /**
     * 
     * @type {OcrResultItem}
     * @memberof PanOcrResult
     */
    pan_image?: OcrResultItem;
    /**
     * 
     * @type {OcrResultItem}
     * @memberof PanOcrResult
     */
    pan_num?: OcrResultItem;
    /**
     * 
     * @type {OcrResultItem}
     * @memberof PanOcrResult
     */
    signature_image?: OcrResultItem;
    /**
     * 
     * @type {boolean}
     * @memberof PanOcrResult
     */
    is_image_blurred?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PanOcrResult
     */
    has_glare?: boolean;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum PoseName {
    Faceup = 'faceup',
    Facedown = 'facedown',
    Faceleft = 'faceleft',
    Faceright = 'faceright',
    Tiltleft = 'tiltleft',
    Tiltright = 'tiltright',
    Facestraight = 'facestraight'
}

/**
 * Image Id in int format and JPG/PNG/BMP image data encoded in base64 format
 * @export
 * @interface PredictWithActionViewModel
 */
export interface PredictWithActionViewModel {
    /**
     * 
     * @type {number}
     * @memberof PredictWithActionViewModel
     */
    imageid: number;
    /**
     * 
     * @type {string}
     * @memberof PredictWithActionViewModel
     */
    image: string;
}
/**
 * 
 * @export
 * @interface SignatureRequest
 */
export interface SignatureRequest {
    /**
     * 
     * @type {string}
     * @memberof SignatureRequest
     */
    image: string;
}
/**
 * 
 * @export
 * @interface SignatureResult
 */
export interface SignatureResult {
    /**
     * 
     * @type {boolean}
     * @memberof SignatureResult
     */
    success: boolean;
    /**
     * 
     * @type {number}
     * @memberof SignatureResult
     */
    errorCode?: number;
    /**
     * 
     * @type {string}
     * @memberof SignatureResult
     */
    errorMessage?: string;
    /**
     * 
     * @type {string}
     * @memberof SignatureResult
     */
    signature_b64_data?: string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    loc: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}
/**
 * 
 * @export
 * @interface VoidOcrResult
 */
export interface VoidOcrResult {
    /**
     * 
     * @type {boolean}
     * @memberof VoidOcrResult
     */
    success: boolean;
    /**
     * 
     * @type {number}
     * @memberof VoidOcrResult
     */
    errorCode?: number;
    /**
     * 
     * @type {string}
     * @memberof VoidOcrResult
     */
    errorMessage?: string;
    /**
     * 
     * @type {string}
     * @memberof VoidOcrResult
     */
    void_no?: string;
    /**
     * 
     * @type {string}
     * @memberof VoidOcrResult
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof VoidOcrResult
     */
    relation_name?: string;
    /**
     * 
     * @type {string}
     * @memberof VoidOcrResult
     */
    sex?: string;
    /**
     * 
     * @type {string}
     * @memberof VoidOcrResult
     */
    date_of_birth?: string;
    /**
     * 
     * @type {string}
     * @memberof VoidOcrResult
     */
    age?: string;
}

/**
 * CvApi - axios parameter creator
 * @export
 */
export const CvApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Alprdetails
         * @param {any} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alprdetailsVoidOcrWithImagePost: async (image: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'image' is not null or undefined
            assertParamExists('alprdetailsVoidOcrWithImagePost', 'image', image)
            const localVarPath = `/void-ocr/with_image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Compare Faces
         * @param {CompareFacesViewModelQR} compareFacesViewModelQR 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compareFacesCompareFacesAadharQRPost: async (compareFacesViewModelQR: CompareFacesViewModelQR, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'compareFacesViewModelQR' is not null or undefined
            assertParamExists('compareFacesCompareFacesAadharQRPost', 'compareFacesViewModelQR', compareFacesViewModelQR)
            const localVarPath = `/compare-facesAadharQR`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(compareFacesViewModelQR, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Compare Faces
         * @param {CompareFacesViewModel} compareFacesViewModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compareFacesCompareFacesPost: async (compareFacesViewModel: CompareFacesViewModel, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'compareFacesViewModel' is not null or undefined
            assertParamExists('compareFacesCompareFacesPost', 'compareFacesViewModel', compareFacesViewModel)
            const localVarPath = `/compare-faces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(compareFacesViewModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Detectsignature
         * @param {SignatureRequest} signatureRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detectsignatureSignatureDetectionPost: async (signatureRequest: SignatureRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'signatureRequest' is not null or undefined
            assertParamExists('detectsignatureSignatureDetectionPost', 'signatureRequest', signatureRequest)
            const localVarPath = `/signature-detection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signatureRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Getpandetails
         * @param {PanOcrRequest} panOcrRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getpandetailsPanOcrPost: async (panOcrRequest: PanOcrRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'panOcrRequest' is not null or undefined
            assertParamExists('getpandetailsPanOcrPost', 'panOcrRequest', panOcrRequest)
            const localVarPath = `/pan-ocr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(panOcrRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Getpandetails
         * @param {any} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getpandetailsPanOcrWithImagePost: async (image: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'image' is not null or undefined
            assertParamExists('getpandetailsPanOcrWithImagePost', 'image', image)
            const localVarPath = `/pan-ocr/with-image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Match Pose
         * @param {MatchPoseRequest} matchPoseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchPoseMatchPosePost: async (matchPoseRequest: MatchPoseRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchPoseRequest' is not null or undefined
            assertParamExists('matchPoseMatchPosePost', 'matchPoseRequest', matchPoseRequest)
            const localVarPath = `/match-pose`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(matchPoseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CvApi - functional programming interface
 * @export
 */
export const CvApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CvApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Alprdetails
         * @param {any} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alprdetailsVoidOcrWithImagePost(image: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoidOcrResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alprdetailsVoidOcrWithImagePost(image, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Compare Faces
         * @param {CompareFacesViewModelQR} compareFacesViewModelQR 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async compareFacesCompareFacesAadharQRPost(compareFacesViewModelQR: CompareFacesViewModelQR, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompareFacesResultQR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.compareFacesCompareFacesAadharQRPost(compareFacesViewModelQR, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Compare Faces
         * @param {CompareFacesViewModel} compareFacesViewModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async compareFacesCompareFacesPost(compareFacesViewModel: CompareFacesViewModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompareFacesResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.compareFacesCompareFacesPost(compareFacesViewModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Detectsignature
         * @param {SignatureRequest} signatureRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detectsignatureSignatureDetectionPost(signatureRequest: SignatureRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignatureResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.detectsignatureSignatureDetectionPost(signatureRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Getpandetails
         * @param {PanOcrRequest} panOcrRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getpandetailsPanOcrPost(panOcrRequest: PanOcrRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PanOcrResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getpandetailsPanOcrPost(panOcrRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Getpandetails
         * @param {any} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getpandetailsPanOcrWithImagePost(image: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PanOcrResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getpandetailsPanOcrWithImagePost(image, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Match Pose
         * @param {MatchPoseRequest} matchPoseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async matchPoseMatchPosePost(matchPoseRequest: MatchPoseRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchPoseResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.matchPoseMatchPosePost(matchPoseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CvApi - factory interface
 * @export
 */
export const CvApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CvApiFp(configuration)
    return {
        /**
         * 
         * @summary Alprdetails
         * @param {any} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alprdetailsVoidOcrWithImagePost(image: any, options?: any): AxiosPromise<VoidOcrResult> {
            return localVarFp.alprdetailsVoidOcrWithImagePost(image, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Compare Faces
         * @param {CompareFacesViewModelQR} compareFacesViewModelQR 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compareFacesCompareFacesAadharQRPost(compareFacesViewModelQR: CompareFacesViewModelQR, options?: any): AxiosPromise<CompareFacesResultQR> {
            return localVarFp.compareFacesCompareFacesAadharQRPost(compareFacesViewModelQR, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Compare Faces
         * @param {CompareFacesViewModel} compareFacesViewModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compareFacesCompareFacesPost(compareFacesViewModel: CompareFacesViewModel, options?: any): AxiosPromise<CompareFacesResult> {
            return localVarFp.compareFacesCompareFacesPost(compareFacesViewModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Detectsignature
         * @param {SignatureRequest} signatureRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detectsignatureSignatureDetectionPost(signatureRequest: SignatureRequest, options?: any): AxiosPromise<SignatureResult> {
            return localVarFp.detectsignatureSignatureDetectionPost(signatureRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Getpandetails
         * @param {PanOcrRequest} panOcrRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getpandetailsPanOcrPost(panOcrRequest: PanOcrRequest, options?: any): AxiosPromise<PanOcrResult> {
            return localVarFp.getpandetailsPanOcrPost(panOcrRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Getpandetails
         * @param {any} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getpandetailsPanOcrWithImagePost(image: any, options?: any): AxiosPromise<PanOcrResult> {
            return localVarFp.getpandetailsPanOcrWithImagePost(image, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Match Pose
         * @param {MatchPoseRequest} matchPoseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchPoseMatchPosePost(matchPoseRequest: MatchPoseRequest, options?: any): AxiosPromise<MatchPoseResults> {
            return localVarFp.matchPoseMatchPosePost(matchPoseRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for alprdetailsVoidOcrWithImagePost operation in CvApi.
 * @export
 * @interface CvApiAlprdetailsVoidOcrWithImagePostRequest
 */
export interface CvApiAlprdetailsVoidOcrWithImagePostRequest {
    /**
     * 
     * @type {any}
     * @memberof CvApiAlprdetailsVoidOcrWithImagePost
     */
    readonly image: any
}

/**
 * Request parameters for compareFacesCompareFacesAadharQRPost operation in CvApi.
 * @export
 * @interface CvApiCompareFacesCompareFacesAadharQRPostRequest
 */
export interface CvApiCompareFacesCompareFacesAadharQRPostRequest {
    /**
     * 
     * @type {CompareFacesViewModelQR}
     * @memberof CvApiCompareFacesCompareFacesAadharQRPost
     */
    readonly compareFacesViewModelQR: CompareFacesViewModelQR
}

/**
 * Request parameters for compareFacesCompareFacesPost operation in CvApi.
 * @export
 * @interface CvApiCompareFacesCompareFacesPostRequest
 */
export interface CvApiCompareFacesCompareFacesPostRequest {
    /**
     * 
     * @type {CompareFacesViewModel}
     * @memberof CvApiCompareFacesCompareFacesPost
     */
    readonly compareFacesViewModel: CompareFacesViewModel
}

/**
 * Request parameters for detectsignatureSignatureDetectionPost operation in CvApi.
 * @export
 * @interface CvApiDetectsignatureSignatureDetectionPostRequest
 */
export interface CvApiDetectsignatureSignatureDetectionPostRequest {
    /**
     * 
     * @type {SignatureRequest}
     * @memberof CvApiDetectsignatureSignatureDetectionPost
     */
    readonly signatureRequest: SignatureRequest
}

/**
 * Request parameters for getpandetailsPanOcrPost operation in CvApi.
 * @export
 * @interface CvApiGetpandetailsPanOcrPostRequest
 */
export interface CvApiGetpandetailsPanOcrPostRequest {
    /**
     * 
     * @type {PanOcrRequest}
     * @memberof CvApiGetpandetailsPanOcrPost
     */
    readonly panOcrRequest: PanOcrRequest
}

/**
 * Request parameters for getpandetailsPanOcrWithImagePost operation in CvApi.
 * @export
 * @interface CvApiGetpandetailsPanOcrWithImagePostRequest
 */
export interface CvApiGetpandetailsPanOcrWithImagePostRequest {
    /**
     * 
     * @type {any}
     * @memberof CvApiGetpandetailsPanOcrWithImagePost
     */
    readonly image: any
}

/**
 * Request parameters for matchPoseMatchPosePost operation in CvApi.
 * @export
 * @interface CvApiMatchPoseMatchPosePostRequest
 */
export interface CvApiMatchPoseMatchPosePostRequest {
    /**
     * 
     * @type {MatchPoseRequest}
     * @memberof CvApiMatchPoseMatchPosePost
     */
    readonly matchPoseRequest: MatchPoseRequest
}

/**
 * CvApi - object-oriented interface
 * @export
 * @class CvApi
 * @extends {BaseAPI}
 */
export class CvApi extends BaseAPI {
    /**
     * 
     * @summary Alprdetails
     * @param {CvApiAlprdetailsVoidOcrWithImagePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CvApi
     */
    public alprdetailsVoidOcrWithImagePost(requestParameters: CvApiAlprdetailsVoidOcrWithImagePostRequest, options?: any) {
        return CvApiFp(this.configuration).alprdetailsVoidOcrWithImagePost(requestParameters.image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Compare Faces
     * @param {CvApiCompareFacesCompareFacesAadharQRPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CvApi
     */
    public compareFacesCompareFacesAadharQRPost(requestParameters: CvApiCompareFacesCompareFacesAadharQRPostRequest, options?: any) {
        return CvApiFp(this.configuration).compareFacesCompareFacesAadharQRPost(requestParameters.compareFacesViewModelQR, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Compare Faces
     * @param {CvApiCompareFacesCompareFacesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CvApi
     */
    public compareFacesCompareFacesPost(requestParameters: CvApiCompareFacesCompareFacesPostRequest, options?: any) {
        return CvApiFp(this.configuration).compareFacesCompareFacesPost(requestParameters.compareFacesViewModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Detectsignature
     * @param {CvApiDetectsignatureSignatureDetectionPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CvApi
     */
    public detectsignatureSignatureDetectionPost(requestParameters: CvApiDetectsignatureSignatureDetectionPostRequest, options?: any) {
        return CvApiFp(this.configuration).detectsignatureSignatureDetectionPost(requestParameters.signatureRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Getpandetails
     * @param {CvApiGetpandetailsPanOcrPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CvApi
     */
    public getpandetailsPanOcrPost(requestParameters: CvApiGetpandetailsPanOcrPostRequest, options?: any) {
        return CvApiFp(this.configuration).getpandetailsPanOcrPost(requestParameters.panOcrRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Getpandetails
     * @param {CvApiGetpandetailsPanOcrWithImagePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CvApi
     */
    public getpandetailsPanOcrWithImagePost(requestParameters: CvApiGetpandetailsPanOcrWithImagePostRequest, options?: any) {
        return CvApiFp(this.configuration).getpandetailsPanOcrWithImagePost(requestParameters.image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Match Pose
     * @param {CvApiMatchPoseMatchPosePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CvApi
     */
    public matchPoseMatchPosePost(requestParameters: CvApiMatchPoseMatchPosePostRequest, options?: any) {
        return CvApiFp(this.configuration).matchPoseMatchPosePost(requestParameters.matchPoseRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


